name: Build

on: [push, pull_request]

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        compiler: [g++-7, g++-8, g++-9, g++-10, clang++-8, clang++-9, clang++-10]
        CUDA: ['0', '6.5', '8.0', '11.0']
        include:
          - os: ubuntu-16.04
            compiler: g++-7
          - os: ubuntu-16.04
            compiler: g++-8
          - os: ubuntu-16.04
            compiler: g++-9
          - os: ubuntu-16.04
            compiler: clang++-8
          - os: ubuntu-16.04
            compiler: clang++-9

    runs-on: ${{ matrix.os }}

    env:
      CUDA_ROOT: '/usr/local/cuda'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Install CUDA runtime
      if: matrix.CUDA != '0'
      run: |
        case ${{ matrix.CUDA }} in
          6.5)
            wget http://developer.download.nvidia.com/compute/cuda/6_5/rel/installers/cuda_6.5.14_linux_64.run
            sudo sh cuda_6.5.14_linux_64.run -extract=${CUDA_ROOT}
            sudo sh ${CUDA_ROOT}/cuda-linux64-rel-6.5.14-18749181.run --tar mxvf -C ${CUDA_ROOT}
            ;;
          8.0)
            wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run
            wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/patches/2/cuda_8.0.61.2_linux-run
            sudo sh cuda_8.0.61_375.26_linux-run --extract=${CUDA_ROOT}
            sudo sh ${CUDA_ROOT}/cuda-linux64-rel-8.0.61-21551265.run --tar mxvf -C ${CUDA_ROOT}
            sudo sh cuda_8.0.61.2_linux-run --accept-eula --silent --installdir=${CUDA_ROOT}
            ;;
          11.0)
            wget https://developer.download.nvidia.com/compute/cuda/11.0.3/local_installers/cuda_11.0.3_450.51.06_linux.run
            sudo sh cuda_11.0.3_450.51.06_linux.run --toolkit --toolkitpath=${CUDA_ROOT} --override --silent
            ;;
        esac
    - name: Create build directory
      run: |
        mkdir build
    - name: Run CMake configure
      if: matrix.CUDA == '0'
      env:
        CXX: ${{ matrix.compiler }}
      run: |
        cd build
        cmake ..
    - name: Run CMake configure
      if: matrix.CUDA != '0'
      env:
        CXX: ${{ matrix.compiler }}
      run: |
        export CPATH=${CUDA_ROOT}/include:${CPATH}
        export LD_LIBRARY_PATH=${CUDA_ROOT}/lib64:${CUDA_ROOT}/lib64/stubs:${LD_LIBRARY_PATH}
        export LIBRARY_PATH=${CUDA_ROOT}/lib64:${CUDA_ROOT}/lib64/stubs:${LIBRARY_PATH}
        export CUDA_LIB_PATH=${CUDA_ROOT}/lib64:${CUDA_ROOT}/lib64/stubs
        export PATH=${CUDA_ROOT}:${PATH}
        export CUDA_HOME=${CUDA_ROOT}
        export CUDA_PATH=${CUDA_ROOT}
        export CUDA_TOOLKIT_ROOT_DIR=${CUDA_ROOT}

        cd build
        cmake -DFIRESTARTER_CUDA=ON -DCMAKE_EXE_LINKER_FLAGS="-L${CUDA_ROOT}/lib64/stubs/" ..
    - name: Build
      run: |
        cd build
        make -j2
    - name: Strip binary
      if: matrix.CUDA == '0'
      run: |
        cd build
        strip src/FIRESTARTER
    - name: Strip binary
      if: matrix.CUDA != '0'
      run: |
        cd build
        strip src/FIRESTARTER_CUDA
    - name: Test FIRESTARTER
      if: matrix.CUDA == '0'
      run: ./build/src/FIRESTARTER -t 1
    - uses: actions/upload-artifact@v2
      if: matrix.compiler == 'clang++-10' && matrix.CUDA == '0'
      with:
        name: FIRESTARTER-linux
        path: build/src/FIRESTARTER
    - uses: actions/upload-artifact@v2
      if: matrix.compiler == 'clang++-10' && matrix.CUDA != '0'
      with:
        name: FIRESTARTER_CUDA_${{ matrix.CUDA }}-linux
        path: build/src/FIRESTARTER_CUDA
  build-windows:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Install Mingw and CMake
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install mingw cmake
    - name: Create build directory
      shell: pwsh
      run: |
        mkdir build
    - name: Run CMake configure
      shell: pwsh
      run: |
        cd build
        cmake -G "MinGW Makefiles" ..
    - name: Build
      shell: pwsh
      run: |
        cd build
        make -j2
    - name: Strip binary
      run: |
        cd build
        strip src\FIRESTARTER.exe
    - name: Test FIRESTARTER
      shell: pwsh
      run: .\build\src\FIRESTARTER.exe -t 1
    - uses: actions/upload-artifact@v2
      with:
        name: FIRESTARTER-windows
        path: build\src\FIRESTARTER.exe
  build-macos:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11.0, macos-10.15]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Install Homebrew dependencies
      run: |
        brew upgrade cmake
    - name: Create build directory
      run: |
        mkdir build
    - name: Run CMake configure
      run: |
        cd build
        cmake ..
    - name: Build
      run: |
        cd build
        make -j2
    - name: Strip binary
      run: |
        cd build
        strip src/FIRESTARTER
    - name: Test FIRESTARTER
      run: |
        cd build
        ./src/FIRESTARTER -t 1
    - uses: actions/upload-artifact@v2
      if: matrix.os == 'macos-11.0'
      with:
        name: FIRESTARTER-osx
        path: build/src/FIRESTARTER
