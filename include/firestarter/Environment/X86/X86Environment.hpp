#ifndef INCLUDE_FIRESTARTER_ENVIRONMENT_X86_X86ENVIRONMENT_HPP
#define INCLUDE_FIRESTARTER_ENVIRONMENT_X86_X86ENVIRONMENT_HPP

#include <firestarter/Environment/Environment.hpp>

#include <firestarter/Environment/X86/Platform/BulldozerConfig.hpp>
#include <firestarter/Environment/X86/Platform/HaswellConfig.hpp>
#include <firestarter/Environment/X86/Platform/HaswellEPConfig.hpp>
#include <firestarter/Environment/X86/Platform/KnightsLandingConfig.hpp>
#include <firestarter/Environment/X86/Platform/NaplesConfig.hpp>
#include <firestarter/Environment/X86/Platform/RomeConfig.hpp>
#include <firestarter/Environment/X86/Platform/NehalemConfig.hpp>
#include <firestarter/Environment/X86/Platform/NehalemEPConfig.hpp>
#include <firestarter/Environment/X86/Platform/SandyBridgeConfig.hpp>
#include <firestarter/Environment/X86/Platform/SandyBridgeEPConfig.hpp>
#include <firestarter/Environment/X86/Platform/SkylakeConfig.hpp>
#include <firestarter/Environment/X86/Platform/SkylakeSPConfig.hpp>
#include <firestarter/Environment/X86/Platform/X86PlatformConfig.hpp>

#include <asmjit/asmjit.h>

#include <functional>

#define REGISTER(NAME)                                                         \
  [](llvm::StringMap<bool> *supportedFeatures, unsigned family,                \
     unsigned model, unsigned threads) -> platform::X86PlatformConfig * {      \
    return new platform::NAME(supportedFeatures, family, model, threads);      \
  }

namespace firestarter::environment::x86 {

class X86Environment : public Environment {
public:
  X86Environment() : Environment(), cpuInfo(asmjit::CpuInfo::host()){};
  ~X86Environment(){};

  unsigned long long timestamp(void) override;

  void evaluateFunctions(void) override;
  int selectFunction(unsigned functionId,
                     bool allowUnavailablePayload) override;
  int selectInstructionGroups(std::string groups) override;
  void printAvailableInstructionGroups(void) override;
  void printSelectedCodePathSummary(void) override;
  void printFunctionSummary(void) override;

private:
  asmjit::CpuInfo cpuInfo;

  void cpuid(unsigned long long *a, unsigned long long *b,
             unsigned long long *c, unsigned long long *d);
  bool hasRdtsc(void);
  bool hasInvariantRdtsc(void);

  int getCpuClockrate(void) override;

  std::string getModel(void) override {
    std::stringstream ss;
    ss << "Family " << cpuInfo.familyId() << ", Model " << cpuInfo.modelId()
       << ", Stepping " << cpuInfo.stepping();
    return ss.str();
  }

  // The available function IDs are generated by iterating through this list of
  // PlatformConfig. Add new PlatformConfig at the bottom to maintain stable
  // IDs.
  const std::list<std::function<platform::X86PlatformConfig *(
      llvm::StringMap<bool> *, unsigned, unsigned, unsigned)>>
      platformConfigsCtor = {
          REGISTER(KnightsLandingConfig), REGISTER(SkylakeConfig),
          REGISTER(SkylakeSPConfig),      REGISTER(HaswellConfig),
          REGISTER(HaswellEPConfig),      REGISTER(SandyBridgeConfig),
          REGISTER(SandyBridgeEPConfig),  REGISTER(NehalemConfig),
          REGISTER(NehalemEPConfig),      REGISTER(BulldozerConfig),
          REGISTER(NaplesConfig),         REGISTER(RomeConfig)};

  std::list<platform::X86PlatformConfig *> platformConfigs;

  // List of fallback PlatformConfig. Add one for each x86 extension.
  const std::list<std::function<platform::X86PlatformConfig *(
      llvm::StringMap<bool> *, unsigned, unsigned, unsigned)>>
      fallbackPlatformConfigsCtor = {
          REGISTER(SkylakeSPConfig),   // AVX512
          REGISTER(BulldozerConfig),   // FMA4
          REGISTER(HaswellConfig),     // FMA
          REGISTER(SandyBridgeConfig), // AVX
          REGISTER(NehalemConfig)      // SSE2
      };

  std::list<platform::X86PlatformConfig *> fallbackPlatformConfigs;
};

} // namespace firestarter::environment::x86

#endif
